@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
skinparam groupInheritance 3
hide empty methods
hide empty members
top to bottom direction
skinparam linetype ortho

class GroupParser {
  + GroupParser(String, String, int):
  - groups: Mail[]
  - selectReceivers(Stack<String>): String[]
  - selectMessage(Stack<String>): String
  - parseFile(String): Stack<String>
  - selectCandidate(Stack<String>): String
   groups: Mail[]
}
entity Mail << record >> {
  + Mail(String, String[], String):
  + receivers(): String[]
  + message(): String
  + sender(): String
}
class MailWorker {
  + MailWorker(Mail):
  - currentCommand: SmtpCommand
  - handleResponse(): String
  + work(String): String
  - handleRequest(String): void
   currentCommand: SmtpCommand
}
class SmtpClient {
  + SmtpClient(String, String, int):
  + main(String[]): void
  + execute(): void
}
enum SmtpCommand << enumeration >> {
  - SmtpCommand(String):
  - value: String
  + values(): SmtpCommand[]
  + valueOf(String): SmtpCommand
  + next(): SmtpCommand
   value: String
}
class SmtpHandler {
  + SmtpHandler(Socket, MailWorker):
  + run(): void
}
enum SmtpStatus << enumeration >> {
  - SmtpStatus(String):
  + valueOf(String): SmtpStatus
  + values(): SmtpStatus[]
  + code(): String
}

GroupParser "1" *--> "*" Mail : "groups"
GroupParser  ..>  Mail        : "«create»"
MailWorker  "1" *--> "1" Mail : "mail"
MailWorker  "1" *--> "1" SmtpCommand : "currentCommand"
SmtpClient   ..>  GroupParser : "«uses»"
SmtpClient  "1" *--> "*" Mail : mails
SmtpClient   ..>  MailWorker  : "«create»"
SmtpClient   ..>  SmtpHandler : "«create»"
SmtpHandler "1" *--> "1" MailWorker : "worker"
MailWorker .l.> SmtpStatus: "«uses»"

Note left of SmtpCommand: Stores the format\nof the commands
Note top of SmtpStatus: Stores the value\nof the status codes
@enduml
